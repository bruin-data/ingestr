from typing import Any
from typing import Optional

rootlogger: Any

def class_logger(cls): ...

class Identified:
    logging_name: Any = ...

class InstanceLogger:
    echo: Any = ...
    logger: Any = ...
    def __init__(self, echo: Any, name: Any) -> None: ...
    def debug(self, msg: Any, *args: Any, **kwargs: Any) -> None: ...
    def info(self, msg: Any, *args: Any, **kwargs: Any) -> None: ...
    def warning(self, msg: Any, *args: Any, **kwargs: Any) -> None: ...
    warn: Any = ...
    def error(self, msg: Any, *args: Any, **kwargs: Any) -> None: ...
    def exception(self, msg: Any, *args: Any, **kwargs: Any) -> None: ...
    def critical(self, msg: Any, *args: Any, **kwargs: Any) -> None: ...
    def log(self, level: Any, msg: Any, *args: Any, **kwargs: Any) -> None: ...
    def isEnabledFor(self, level: Any): ...
    def getEffectiveLevel(self): ...

def instance_logger(instance: Any, echoflag: Optional[Any] = ...) -> None: ...

class echo_property:
    __doc__: str = ...
    def __get__(self, instance: Any, owner: Any): ...
    def __set__(self, instance: Any, value: Any) -> None: ...
