from typing import Any

from .base import BIT as BIT
from .base import MySQLCompiler as MySQLCompiler
from .base import MySQLDialect as MySQLDialect
from .base import MySQLIdentifierPreparer as MySQLIdentifierPreparer
from ... import processors as processors
from ... import util as util

class MySQLCompiler_mysqlconnector(MySQLCompiler):
    def visit_mod_binary(self, binary: Any, operator: Any, **kw: Any): ...
    def post_process_text(self, text: Any): ...
    def escape_literal_column(self, text: Any): ...

class MySQLIdentifierPreparer_mysqlconnector(MySQLIdentifierPreparer): ...

class _myconnpyBIT(BIT):
    def result_processor(self, dialect: Any, coltype: Any) -> None: ...

class MySQLDialect_mysqlconnector(MySQLDialect):
    driver: str = ...
    supports_unicode_binds: bool = ...
    supports_sane_rowcount: bool = ...
    supports_sane_multi_rowcount: bool = ...
    supports_native_decimal: bool = ...
    default_paramstyle: str = ...
    statement_compiler: Any = ...
    preparer: Any = ...
    colspecs: Any = ...
    def __init__(self, *arg: Any, **kw: Any) -> None: ...
    @property
    def description_encoding(self): ...
    @util.memoized_property
    def supports_unicode_statements(self): ...
    @classmethod
    def dbapi(cls): ...
    def do_ping(self, dbapi_connection: Any): ...
    def create_connect_args(self, url: Any): ...
    def is_disconnect(self, e: Any, connection: Any, cursor: Any): ...

dialect = MySQLDialect_mysqlconnector
